import { __extends } from "tslib";
import { NodeMaterialBlock } from "../../nodeMaterialBlock.js";
import { NodeMaterialBlockConnectionPointTypes } from "../../Enums/nodeMaterialBlockConnectionPointTypes.js";
import { NodeMaterialBlockTargets } from "../../Enums/nodeMaterialBlockTargets.js";
import { RegisterClass } from "../../../../Misc/typeStore.js";
/**
 * Block used to convert a height vector to a normal
 */
var HeightToNormalBlock = /** @class */ (function (_super) {
    __extends(HeightToNormalBlock, _super);
    /**
     * Creates a new HeightToNormalBlock
     * @param name defines the block name
     */
    function HeightToNormalBlock(name) {
        var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;
        _this.registerInput("input", NodeMaterialBlockConnectionPointTypes.Float);
        _this.registerInput("position", NodeMaterialBlockConnectionPointTypes.Vector3);
        _this.registerInput("normal", NodeMaterialBlockConnectionPointTypes.Vector3);
        _this.registerInput("tangent", NodeMaterialBlockConnectionPointTypes.Vector3);
        _this.registerOutput("output", NodeMaterialBlockConnectionPointTypes.Vector3);
        _this._inputs[3].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);
        return _this;
    }
    /**
     * Gets the current class name
     * @returns the class name
     */
    HeightToNormalBlock.prototype.getClassName = function () {
        return "HeightToNormalBlock";
    };
    Object.defineProperty(HeightToNormalBlock.prototype, "input", {
        /**
         * Gets the input component
         */
        get: function () {
            return this._inputs[0];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeightToNormalBlock.prototype, "position", {
        /**
         * Gets the position component
         */
        get: function () {
            return this._inputs[1];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeightToNormalBlock.prototype, "normal", {
        /**
         * Gets the normal component
         */
        get: function () {
            return this._inputs[2];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeightToNormalBlock.prototype, "tangent", {
        /**
         * Gets the tangent component
         */
        get: function () {
            return this._inputs[3];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeightToNormalBlock.prototype, "output", {
        /**
         * Gets the output component
         */
        get: function () {
            return this._outputs[0];
        },
        enumerable: false,
        configurable: true
    });
    HeightToNormalBlock.prototype._buildBlock = function (state) {
        _super.prototype._buildBlock.call(this, state);
        var output = this._outputs[0];
        var heightToNormal = "\n        vec3 heightToNormal(in float height, in vec3 position, in vec3 tangent, in vec3 normal) {\n            vec3 biTangent = cross(tangent, normal);\n            mat3 TBN = mat3(tangent, biTangent, normal);\n            vec3 worlddX = dFdx(position * 100.0);\n            vec3 worlddY = dFdy(position * 100.0);\n            vec3 crossX = cross(normal, worlddX);\n            vec3 crossY = cross(normal, worlddY);\n            float d = abs(dot(crossY, worlddX));\n            vec3 inToNormal = vec3(((((height + dFdx(height)) - height) * crossY) + (((height + dFdy(height)) - height) * crossX)) * sign(d));\n            inToNormal.y *= -1.0;\n            vec3 result = normalize((d * normal) - inToNormal);\n            return TBN * result;\n        }";
        state._emitExtension("derivatives", "#extension GL_OES_standard_derivatives : enable");
        state._emitFunction("heightToNormal", heightToNormal, "// heightToNormal");
        state.compilationString +=
            this._declareOutput(output, state) +
                " = heightToNormal(".concat(this.input.associatedVariableName, ", ").concat(this.position.associatedVariableName, ", ").concat(this.tangent.associatedVariableName, ".xyz, ").concat(this.normal.associatedVariableName, ");\r\n");
        return this;
    };
    return HeightToNormalBlock;
}(NodeMaterialBlock));
export { HeightToNormalBlock };
RegisterClass("BABYLON.HeightToNormalBlock", HeightToNormalBlock);
//# sourceMappingURL=heightToNormalBlock.js.map