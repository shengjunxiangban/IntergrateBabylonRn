import type { IGLTFLoaderExtension } from "../glTFLoaderExtension";
import { GLTFLoader } from "../glTFLoader";
import type { Nullable } from "@babylonjs/core/types.js";
import { AnimationGroup } from "@babylonjs/core/Animations/animationGroup.js";
import type { IAnimatable } from "@babylonjs/core/Animations/animatable.interface.js";
import type { IAnimation, IAnimationChannel } from "../glTFLoaderInterfaces";
/**
 * [Specification PR](https://github.com/KhronosGroup/glTF/pull/2147)
 */
export declare class KHR_animation_pointer implements IGLTFLoaderExtension {
    /**
     * used to gently ignore invalid pointer. If false, invalid pointer will throw exception.
     */
    ignoreInvalidPointer: boolean;
    /**
     * The name of this extension.
     */
    readonly name = "KHR_animation_pointer";
    private _loader;
    /**
     * @param loader
     * @hidden
     */
    constructor(loader: GLTFLoader);
    /**
     * Defines whether this extension is enabled.
     */
    get enabled(): boolean;
    /** @hidden */
    dispose(): void;
    /**
     * according to specification,
     * It is not allowed to animate a glTFid property, as it does change the structure of the glTF in general
     * It is not allowed to animate a name property in general.
     * @param property
     * @hidden
     */
    accept(property: string): boolean;
    loadAnimationAsync(context: string, animation: IAnimation): Nullable<Promise<AnimationGroup>>;
    /**
     * @hidden Loads a glTF animation channel.
     * @param context The context when loading the asset
     * @param animationContext The context of the animation when loading the asset
     * @param animation The glTF animation property
     * @param channel The glTF animation channel property
     * @param animationTargetOverride The babylon animation channel target override property. My be null.
     * @returns A void promise when the channel load is complete
     */
    _loadAnimationChannelAsync(context: string, animationContext: string, animation: IAnimation, channel: IAnimationChannel, animationTargetOverride?: Nullable<IAnimatable>): Promise<void>;
    private _loadAnimationSamplerAsync;
    /**
     * parsing animation pointer is the core of animation channel.
     * Animation pointer is a Json pointer, which mean it locate an item into the json hierarchy.
     * Consequentely the pointer has the following BNF
   
     * <animationPointer> := <sep><assetContainer><sep><assetIndex><sep><propertyPath>
     * <assetContainer> := "nodes" | "materials" | "meshes" | "cameras" | "extensions"
     * <assetIndex> := <digit> | <name>
     * <propertyPath> := <extensionPath> | <standardPath>
     * <extensionPath> := "extensions"<sep><name><sep><standardPath>
     * <standardPath> := <name> | <name><sep><standardPath>
     * <sep>:= "/"
     * <name> := W+
     * <digit> := D+
     *
     * examples of pointer are
     *  - "/nodes/0/rotation"
     *  - "/materials/2/emissiveFactor"
     *  - "/materials/2/pbrMetallicRoughness/baseColorFactor"
     *  - "/materials/2/extensions/KHR_materials_emissive_strength/emissiveStrength"
     * @param context
     * @param pointer
     * @return
     */
    private _parseAnimationPointer;
}
