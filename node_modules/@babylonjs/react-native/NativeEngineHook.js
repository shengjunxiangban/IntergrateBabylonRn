import { useEffect, useState } from 'react';
import { AppState } from 'react-native';
import { ensureInitialized } from './BabylonModule';
import './VersionValidation';
export function useModuleInitializer() {
    const [initialized, setInitialized] = useState();
    useEffect(() => {
        (async () => {
            setInitialized(await ensureInitialized());
        })();
    }, []);
    return initialized;
}
function useAppState() {
    const [appState, setAppState] = useState(AppState.currentState);
    useEffect(() => {
        const onAppStateChanged = (appState) => {
            setAppState(appState);
        };
        AppState.addEventListener("change", onAppStateChanged);
        return () => {
            AppState.removeEventListener("change", onAppStateChanged);
        };
    }, []);
    return appState;
}
export function useRenderLoop(engine, renderCallback) {
    const appState = useAppState();
    useEffect(() => {
        if (engine && appState === "active") {
            if (!engine.isDisposed) {
                engine.runRenderLoop(renderCallback);
                return () => {
                    if (!engine.isDisposed) {
                        engine.stopRenderLoop();
                    }
                };
            }
        }
        return undefined;
    }, [appState, engine]);
}
//# sourceMappingURL=NativeEngineHook.js.map